Exp 1

npm install crypto-js

const SHA256 = require('crypto-js/sha256');
const { stringify } = require('querystring');

class Block{
    constructor(index, timestamp,data, previousHash=''){
        this.index=index;
        this.timestamp=timestamp;
        this.data=data;
        this.previousHash=previousHash;
        this.hash=this.calculateHash();
        this.nounce=0;
    }
calculateHash(){
    return SHA256(this.index + this.timestamp + JSON.stringify(this.data) + this.previousHash + this.nounce).toString();
}
mineBlock(difficulty){
    while(this.hash.substring(0, difficulty) != Array(difficulty+1).join("0"))
{
        this.nounce++;
        this.hash = this.calculateHash();
    }
}
}


class Blockchain{
    constructor(){
        this.chain = [this.createGenesisBlock()];
        this.difficulty=2;
    }

    createGenesisBlock(){
        return new Block(0, "16/06/2024", "This is Genesis Block", "0");
    }

     getLatestBlock(){
         return this.chain[this.chain.length-1];
    }

     addBlock(newBlock){
         newBlock.previousHash = this.getLatestBlock().hash;
         newBlock.mineBlock(this.difficulty);
         this.chain.push(newBlock);
     }

    isChainValid(){
        for(let i=1; i<this.chain.length; i++){
            const currentBlock = this.chain[i];
            const previousBlock = this.chain[i-1];

            if(currentBlock.hash != currentBlock.calculateHash()){
                return false;
            }

            if(currentBlock.previousHash != previousBlock.hash){
                return false;
            }
        }
        return true;
    }
    
}


let myCoin=new Blockchain();
console.log("Genesis Block created ....");
console.log(JSON.stringify(myCoin, null, 4));

console.log("Mining Block 1 ....");
myCoin.addBlock(new Block(1,"17/06/2024","this is block 1:  <Name> - <Reg No.>"));
console.log(JSON.stringify(myCoin, null, 4));

console.log("Mining Block 2 ....");
myCoin.addBlock(new Block(2,"18/06/2024","this is block 2: <Name> - <Reg No.>"));
console.log(JSON.stringify(myCoin, null, 4));

myCoin.chain[1].data={amount:100};
myCoin.chain[1].hash=myCoin.chain[1].calculateHash();
console.log("is Chain Valid? "+ myCoin.isChainValid() );
console.log(JSON.stringify(myCoin, null, 4));















Exp 2

1. Run this twice to make two accounts

geth --datadir "/home/sckarge/dev/eth" account new

2. To start a node
Start from this step if not doing this for the first time
We have to manually add this password to the secret file
Here secret.txt contains the key(the password we manually put) Creates a new chain with a chain id

geth --datadir "/home/sckarge/dev/eth" --dev --password
"/home/sckarge/dev/eth/secret.txt"

3. Have to use IPC endpt to communicate with this node(I think remains the same each time, but check just in case. It appears in the logs of the node)

geth attach /home/sckarge/dev/eth/geth.ipc

3.1 In the JS console use
This shows details of the chain

eth


3.2 Gives accounts only

eth.accounts

3.3 Main acc(coinbase)

eth.coinbase

3.4 Shows balance in wei

eth.getBalance(eth.accounts[0])


eth.sendTransaction({from:eth.accounts[0],to:eth.accounts[1],value:web3.toWei(1,"ether")})

We have 2 accounts but, only 1 node

Acc 1
password:Newaccount
PU key : 0xf2E2Aa0f5aad0B074719D139516B9B8aD57fA88d

Acc 2
password:Newaccount2
PU key : 0x5552b41550fAcD4E3D0a736AdEF028AF0be03c4f
Exp 3

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
contract RentalContract {
    // The address of the owner (landlord) who deploys the contract
    address public owner;
    // Struct to represent a rental agreement
    struct RentalAgreement {
        address tenant;    // Address of the tenant
        uint deposit;      // Amount of deposit submitted by the tenant
        bool isActive;     // State of the agreement (active or inactive)
    }
    // Mapping to store multiple rental agreements between the owner and tenants
    mapping(uint => RentalAgreement) public agreements;
    // A counter to assign a unique ID to each rental agreement
    uint public agreementCounter;
    // Event to notify when a new agreement is created
    event AgreementCreated(uint agreementId, address indexed tenant, uint deposit);
    // Event to notify when a deposit is submitted by the tenant
    event DepositSubmitted(uint agreementId, uint amount);
    // Modifier to restrict certain functions to the contract owner
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can perform this action");
        _;
    }
    // Modifier to restrict certain functions to the tenant of a specific agreement
    modifier onlyTenant(uint agreementId) {
        require(msg.sender == agreements[agreementId].tenant, "Only the tenant can perform this action");
        _;
    }
    // Constructor to set the owner as the account that deploys the contract
    constructor() {
        owner = msg.sender;
    }
    // Function to create a new rental agreement
    // The owner can create a contract by providing the tenant's address and initial deposit
    function createAgreement(address _tenant) public onlyOwner {
        // Increment the agreement counter to get a unique ID
        agreementCounter++;
        // Create a new rental agreement and store it in the mapping
        agreements[agreementCounter] = RentalAgreement({
            tenant: _tenant,
            deposit: 0,  // Initially, no deposit is submitted
            isActive: true  // Agreement is active upon creation
        });
        
        // Emit event to notify that a new agreement has been created
        emit AgreementCreated(agreementCounter, _tenant, 0);
    }
    // Function for the tenant to submit a deposit to the rental agreement
    function submitDeposit(uint agreementId) public payable onlyTenant(agreementId) {
        // Ensure that the agreement is active
        require(agreements[agreementId].isActive, "Rental agreement is not active");
        // Add the submitted amount to the deposit balance
        agreements[agreementId].deposit += msg.value;
        // Emit event to notify that a deposit has been submitted
        emit DepositSubmitted(agreementId, msg.value);
    }
    // Function for the owner to check the balance (deposit) of a specific rental agreement
    function checkAgreementBalance(uint agreementId) public view returns (uint) {
        // Ensure the agreement exists
        require(agreementId <= agreementCounter, "Agreement does not exist");
        // Return the deposit amount of the agreement
        return agreements[agreementId].deposit;
    }
    // Function to end the rental agreement
    // Only the owner can end the agreement
    function endAgreement(uint agreementId) public onlyOwner {
        // Ensure that the agreement is still active
        require(agreements[agreementId].isActive, "Agreement is already inactive");
        // Mark the agreement as inactive
        agreements[agreementId].isActive = false;
    }
 // Function to withdraw the tenant's deposit
    // Only the owner can withdraw funds (typically after agreement ends)
    function withdrawDeposit(uint agreementId) public onlyOwner {
        // Ensure that the agreement is inactive
        require(!agreements[agreementId].isActive, "Cannot withdraw while agreement is active");
        // Ensure there is a deposit to withdraw
        uint depositAmount = agreements[agreementId].deposit;
        require(depositAmount > 0, "No deposit to withdraw");
        // Reset the deposit balance before transfer to prevent re-entrancy attacks
        agreements[agreementId].deposit = 0;
        // Transfer the deposit to the owner
        payable(owner).transfer(depositAmount);
    }
}










Key Points:
1.	Contract Owner: The person deploying the contract is the owner (landlord), who has specific privileges like creating agreements, ending them, and withdrawing the deposit.
2.	Tenants: Tenants are participants in the agreement. Each agreement has a tenant address, and only the tenant of that agreement can submit the deposit.
3.	Deposits: Tenants can deposit funds into the contract, which gets associated with their rental agreement.
4.	State Replication: On a decentralized network (like Ethereum), the state changes (such as the deposit submission or agreement creation) are automatically replicated across all nodes.
5.	Balance Check: The owner can check the deposit for any specific agreement by calling the checkAgreementBalance function from any node.
Steps to Deploy and Execute on Remix IDE:
1.	Go to Remix IDE:
o	Open your browser and go to Remix IDE.
2.	Create a New File:
o	On the left panel, click on the file explorer icon, then create a new file, name it RentalContract.sol, and paste the contract code into the editor.
3.	Compile the Contract:
o	On the left panel, click on the Solidity Compiler icon.
o	Choose the appropriate version (0.8.x), which matches the pragma in the contract.
o	Click the Compile button to compile the contract.
4.	Deploy the Contract:
o	Go to the Deploy & Run Transactions panel on the left.
o	Under Environment, choose "JavaScript VM" (this simulates a blockchain locally in your browser).
o	Click the Deploy button to deploy the contract.
5.	Interact with the Contract: Once deployed, you can interact with the contract functions.
o	Owner Actions:
	The owner is the account that deployed the contract.
	Use createAgreement(address tenant) to create a rental agreement by providing a tenant's address (e.g., use another account's address from the dropdown).
o	Tenant Actions:
	Switch to the tenant account from the account dropdown.
	Call submitDeposit(agreementId) with the appropriate agreement ID and send ETH (adjust the value field to specify how much ETH to send).
o	Owner Checking:
	Switch back to the owner account and call checkAgreementBalance(agreementId) to see the current deposit.
o	End the Agreement:
	As the owner, call endAgreement(agreementId) to mark the rental agreement as inactive.
o	Withdraw Deposit:
	Call withdrawDeposit(agreementId) to transfer the deposit to the owner's account.










Exp 4

Program #1: Helloworld

// SPDX-License-Identifier: MIT
pragma solidity >=0.7.0 <0.9.0;
contract HelloWorld {
    string public greet = "Hello World!";
}

Program #2: a simple contract that you can get, increment and decrement the count store in this contract.

pragma solidity >=0.7.0 <0.9.0;

contract Counter {
    uint public count;

    // Function to get the current count
    function get() public view returns (uint) {
        return count;
    }

    // Function to increment count by 1
    function inc() public {
        count += 1;
    }

    // Function to decrement count by 1
    function dec() public {
        count -= 1;
    }
}

Program #3: 3 types of variables

pragma solidity >=0.7.0 <0.9.0;

contract Variables {
    // State variables are stored on the blockchain.
    string public text = "Hello";
    uint public num = 123;

    function doSomething() public {
        // Local variables are not saved to the blockchain.
        uint i = 456;

        // Here are some global variables
        uint timestamp = block.timestamp; // Current block timestamp
        address sender = msg.sender; // address of the caller
    }
}

Program #4: Reading and Writing to a State Variable

pragma solidity >=0.7.0 <0.9.0;

contract SimpleStorage {
    // State variable to store a number
    uint public num;

    // You need to send a transaction to write to a state variable.
    function set(uint _num) public {
        num = _num;
    }

    // You can read from a state variable without sending a transaction.
    function get() public view returns (uint) {
        return num;
    }
}

Program #5: Program for twitter

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
// 1️ Define a Tweet Struct with author, content, timestamp, likes
// 2️ Add the struct to array
// 3️ Test Tweets

contract Twitter {
    // define our struct
    struct Tweet {
        address author;
        string content;
        uint256 timestamp;
        uint256 likes;
    }
    // add our code
    mapping(address => Tweet[] ) public tweets;

    function createTweet(string memory _tweet) public {
        Tweet memory newTweet = Tweet({
            author: msg.sender,
            content: _tweet,
            timestamp: block.timestamp,
            likes: 0
        });

        tweets[msg.sender].push(newTweet);
    }

    function getTweet(address _owner, uint _i) public view returns (Tweet memory) {
        return tweets[_owner][_i];
    }

    function getAllTweets(address _owner) public view returns (Tweet[] memory ){
        return tweets[_owner];
    }

}


Program #6: Simple Wallet

contract Bank {
    mapping(address => uint) balance;	
    address owner;
    
    constructor() {
        owner = msg.sender; // address that deploys contract will be the owner
    }
    
    function addBalance(uint _toAdd) public returns(uint) {
        require(msg.sender == owner);
        balance[msg.sender] += _toAdd;
        return balance[msg.sender];
    }
    
    function getBalance() public view returns(uint) {
        return balance[msg.sender];
    }
    
    function transfer(address recipient, uint amount) public {
        require(balance[msg.sender]>=amount, "Insufficient Balance");
        require(msg.sender != recipient, "You can't send money to yourself!");
        _transfer(msg.sender, recipient, amount);
    }
    
    function _transfer(address from, address to, uint amount) private {
        balance[from] -= amount;
        balance[to] += amount;
    }
}






Exp 5

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
contract SecureWithdrawal {
    // Address of the contract owner
    address public owner;
    // Maximum amount allowed to withdraw per transaction
    uint public maxWithdrawAmount;
    // Cooldown period in seconds
    uint public withdrawalCooldown;
    // Last withdrawal timestamp for the owner
    uint private lastWithdrawalTimestamp;
    // Event to log withdrawals
    event Withdrawal(address indexed to, uint amount);
    // Modifier to allow only the owner to call certain functions
    modifier onlyOwner() {
        require(msg.sender == owner, "Not the contract owner");
        _;
    }
    // Constructor to initialize owner, max withdrawal amount, and cooldown
    constructor(uint _maxWithdrawAmount, uint _withdrawalCooldown) {
        owner = msg.sender;  // Set the deployer as the contract owner
        maxWithdrawAmount = _maxWithdrawAmount;
        withdrawalCooldown = _withdrawalCooldown;
    }
    // Function to receive Ether directly into the contract
    receive() external payable {}
    // Function for the owner to withdraw funds with security restrictions
    function withdraw(uint amount) external onlyOwner {
        require(amount > 0, "Withdrawal amount must be greater than zero");
        require(amount <= maxWithdrawAmount, "Exceeds maximum withdraw limit");
        require(address(this).balance >= amount, "Insufficient contract balance");
        require(
            block.timestamp >= lastWithdrawalTimestamp + withdrawalCooldown,
            "Cooldown period not yet passed"
        );
        // Update the last withdrawal timestamp
        lastWithdrawalTimestamp = block.timestamp;

        // Transfer the specified amount to the owner
        payable(owner).transfer(amount);

        // Emit an event for logging purposes
        emit Withdrawal(owner, amount);
    }
    // Function for the owner to change the maximum withdrawal amount
    function setMaxWithdrawAmount(uint _maxWithdrawAmount) external onlyOwner {
        maxWithdrawAmount = _maxWithdrawAmount;
    }
    // Function for the owner to set a cooldown period for withdrawals
    function setWithdrawalCooldown(uint _withdrawalCooldown) external onlyOwner {
        withdrawalCooldown = _withdrawalCooldown;
    }
    // Helper function to check the contract balance
    function contractBalance() external view returns (uint) {
        return address(this).balance;
    }
}


Steps to Deploy and Execute on Remix IDE:
1.	Deploy the Contract:
o	Enter maxWithdrawAmount in wei (e.g., 1000000000000000000 for 1 ETH) and withdrawalCooldown in seconds (e.g., 86400 for 24 hours).
o	Click Deploy. This will set the deployer account as the owner.
2.	Fund the Contract:
o	Copy the contract’s address.
o	In the Value field in Remix, enter an amount of Ether and click transact to fund the contract.
o	Call contractBalance() to verify the contract balance.
3.	Withdraw Funds:
o	Ensure you’re using the owner’s account.
o	Call the withdraw function with an amount within the set maxWithdrawAmount.
o	Call contractBalance() again to check the balance after withdrawal.
4.	Modify Limits and Test Cooldown:
o	Use setMaxWithdrawAmount and setWithdrawalCooldown to modify restrictions.
o	Test that the cooldown works by attempting repeated withdrawals within the cooldown period.


















Exp 6

npm install -g truffle

truffle version


//**Setting up your project**//

-> Create a folder for your project
-> Get into the folder and give
- truffle init
-> Check the project file in your folder
- 3 folders and 1 config file
Contracts
Migrations
Test


//**Compiling Smart Contract**//

-> Create your smart contract in the contracts folder
- Create the solidity file
-> Check the compiler version in config file and the solidity file
-> Compile the contract using the command:
- truffle compile
-> Check the artifacts in build folder
- Check the json file in the name of contract


//** Migrations and Deployment**//

-> Create a migration file
- 1_deploycontract.js

const hello = artifacts.require("./HelloWorld.sol");
module.exports = function(deployer) {
  deployer.deploy(hello);
};

-> Enter into the development environment
- truffle develop
-> Deploy your contract
- truffle migrate






//** Interact with smart contracts  **//

-> Create instance
- let instance = await contarctname.deployed()
-> Get the accounts
- let accounts = await web3.eth.getAccounts()
-> Call the functions as 
- let balance = await instance.getBalance(accounts[0])
-> Call the state variable as
- Instancename.variablename()


//** Testing smart contracts **//

-> Write the test case in test folder 
.js file
-> Test your smart contract
truffle test



